package com.vine.math;

import com.vine.util.BufferUtils;

import java.nio.FloatBuffer;

public class Transformation {
    private float a11;
    private float a12;
    private float a13;
    private float a14;
    //
    private float a21;
    private float a22;
    private float a23;
    private float a24;
    //
    private float a31;
    private float a32;
    private float a33;
    private float a34;
    //
    private float a41;
    private float a42;
    private float a43;
    private float a44;

    /**
     * Returns an 4x4 identity matrix.
     */
    public void identity() {
        a11 = 1.f;
        a12 = 0.f;
        a13 = 0.f;
        a14 = 0.f;
        a21 = 0.f;
        a22 = 1.f;
        a23 = 0.f;
        a24 = 0.f;
        a31 = 0.f;
        a32 = 0.f;
        a33 = 1.f;
        a34 = 0.f;
        a41 = 0.f;
        a42 = 0.f;
        a43 = 0.f;
        a44 = 1.f;
    }

    /**
     * Creates an orthographic transformation matrix.
     */
    public void orthographic(float left, float right, float bottom, float top, float near, float far) {
        a11 = 2.0f / (right - left);
        a12 = 0.f;
        a13 = 0.f;
        a14 = 0.f;
        a21 = 2.0f / (top - bottom);
        a22 = 0.f;
        a23 = 0.f;
        a24 = 0.f;
        a31 = 0.f;
        a32 = 2.0f / (near - far);
        a33 = 0.f;
        a34 = 0.f;
        a41 = (left + right) / (left - right);
        a42 = (bottom + top) / (bottom - top);
        a43 = (far + near) / (far - near);
        a44 = 0.f;
    }

    /**
     * Sets the translation of the transformation.
     */
    public static Transformation translate(Vector3f vector) {
        Transformation result = identity();
        a14 = vector.getX();
        a24 = vector.getY();
        a34 = vector.getZ();
        return result;
    }

    /**
     * Sets the angle of the rotation of the transformation.
     */
    public void setRotation(float angle) {
        float rotation = (float) Math.toRadians(angle);
        float cos = (float) Math.cos(rotation);
        float sin = (float) Math.sin(rotation);

        a11 = cos;
        a12 = sin;

        a21 = -sin;
        a22 = cos;
    }

    /**
     * Multiplies the given matrix from the right and returns the result.
     */
    public Transformation multiply(Transformation matrix) {
        Transformation result = new Transformation();
        for (int y = 0; y < 4; y++) {
            for (int x = 0; x < 4; x++) {
                float sum = 0.0f;
                for (int e = 0; e < 4; e++) {
                    sum += this.elements[x + e * 4] * matrix.elements[e + y * 4];
                }
                result.elements[x + y * 4] = sum;
            }
        }
        return result;
    }

    public FloatBuffer toFloatBuffer() {
        return BufferUtils.createFloatBuffer(
                new float[] { a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44 });
    }

}

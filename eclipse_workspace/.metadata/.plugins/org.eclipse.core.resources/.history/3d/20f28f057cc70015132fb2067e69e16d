package vine.platform.lwjgl3;

import static org.lwjgl.opengl.GL11.GL_FLOAT;
import static org.lwjgl.opengl.GL11.GL_TRIANGLES;
import static org.lwjgl.opengl.GL11.GL_UNSIGNED_INT;
import static org.lwjgl.opengl.GL11.glDrawArrays;
import static org.lwjgl.opengl.GL11.glDrawElements;
import static org.lwjgl.opengl.GL15.GL_ARRAY_BUFFER;
import static org.lwjgl.opengl.GL15.GL_ELEMENT_ARRAY_BUFFER;
import static org.lwjgl.opengl.GL15.GL_STATIC_DRAW;
import static org.lwjgl.opengl.GL15.glBindBuffer;
import static org.lwjgl.opengl.GL15.glBufferData;
import static org.lwjgl.opengl.GL20.glEnableVertexAttribArray;
import static org.lwjgl.opengl.GL20.glVertexAttribPointer;
import static org.lwjgl.opengl.GL30.glBindVertexArray;

import vine.game.Game;
import vine.graphics.Graphics;
import vine.graphics.Shader;
import vine.graphics.VertexArray;
import vine.util.BufferConverter;

/**
 * @author Steffen
 *
 */
public class GLVertexArray implements VertexArray {

    /**
     * Vertex array object.
     */
    private final int vao;
    /**
     * Vertex buffer object.
     */
    private final int vbo;
    /**
     * Index buffer object.
     */
    private final int ibo;
    /**
     * Texture buffer object.
     */
    private final int tbo;
    private final int count;

    private final Graphics graphics;

    /**
     * Creates a new vertex array buffer.
     * 
     * @param vertices
     *            The vertices
     * @param indices
     *            The indices for the vertex order
     * @param uvs
     *            The texture coordinates for the vertices
     */
    public GLVertexArray(final float[] vertices, final int[] indices, final float[] uvs) {
        if (indices == null) {
            throw new NullPointerException("indice field of vertex array can't be null.");
        }
        graphics = Game.getGame().getGraphics();

        count = indices.length;

        vao = graphics.generateVertexArray();
        graphics.bindArrayBuffer(vao);

        vbo = graphics.generateBuffer();
        graphics.bindVertexData(vbo, vertices);

        tbo = graphics.generateBuffer();
        graphics.bindTextureData(tbo, uvs);

        ibo = graphics.generateBuffer();
        graphics.bindIndexData(ibo, indices);
        graphics.bindArrayBuffer(0);
    }

    @Override
    public void changeVertices(final float[] vertices) {
        graphics.bindVertexData(vbo, vertices);
    }

    @Override
    public void changeTexture(final float[] uvs) {
        graphics.bindTextureData(tbo, uvs);
    }

    /**
     * Binds the current vertex array buffer.
     */
    @Override
    public void bind() {
        graphics.bindArrayBuffer(vao);
        if (ibo > 0) {
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
        }
    }

    /**
     * Unbinds the current vertex array buffer.
     */
    public void unbind() {
        if (ibo > 0) {
            glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
        }
        glBindVertexArray(0);
    }

    /**
     * Draws the current triangles in the buffer.
     */
    @Override
    public void draw() {
        if (ibo > 0) {
            glDrawElements(GL_TRIANGLES, count, GL_UNSIGNED_INT, 0);
        } else {
            glDrawArrays(GL_TRIANGLES, 0, count);
        }
    }
}

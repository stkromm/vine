package vine.reflection;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;

import org.apache.log4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author Steffen
 *
 */
public class VineMethodUtils {
    private static final Logger LOGGER = LoggerFactory.getLogger(VineMethodUtils.class);

    private VineMethodUtils() {
    }

    /**
     * @param method
     * @param object
     * @param params
     */
    public static final void invokeMethodOn(Method method, Object object, Object... params) {
        try {
            method.invoke(object, params);
        } catch (IllegalAccessException e) {
            LOGGER.error("The construct method you've implemented in the class " + object.getClass().toString()
                    + " is not public.", e);

        } catch (IllegalArgumentException e) {
            String par = Arrays.toString(params);
            LOGGER.error(
                    "The supplied arguments " + par + " don't match the defined argument list of the given class "
                            + object.getClass().toString()
                            + " construct method.\n Be sure to supply the right number of arguments in the order they are declared in the construct method.",
                    e);

        } catch (InvocationTargetException e) {
            LOGGER.error("Class has not construct method. Have you passed a GameObject inherited class?", e);
        }
    }
}

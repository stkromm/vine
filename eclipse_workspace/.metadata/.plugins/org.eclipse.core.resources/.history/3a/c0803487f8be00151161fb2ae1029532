package vine.platform.lwjgl3;

import static org.lwjgl.glfw.GLFW.GLFW_ACCUM_ALPHA_BITS;
import static org.lwjgl.glfw.GLFW.GLFW_ACCUM_BLUE_BITS;
import static org.lwjgl.glfw.GLFW.GLFW_ACCUM_GREEN_BITS;
import static org.lwjgl.glfw.GLFW.GLFW_ACCUM_RED_BITS;
import static org.lwjgl.glfw.GLFW.GLFW_ALPHA_BITS;
import static org.lwjgl.glfw.GLFW.GLFW_AUX_BUFFERS;
import static org.lwjgl.glfw.GLFW.GLFW_BLUE_BITS;
import static org.lwjgl.glfw.GLFW.GLFW_DECORATED;
import static org.lwjgl.glfw.GLFW.GLFW_DEPTH_BITS;
import static org.lwjgl.glfw.GLFW.GLFW_FALSE;
import static org.lwjgl.glfw.GLFW.GLFW_FOCUSED;
import static org.lwjgl.glfw.GLFW.GLFW_GREEN_BITS;
import static org.lwjgl.glfw.GLFW.GLFW_ICONIFIED;
import static org.lwjgl.glfw.GLFW.GLFW_RED_BITS;
import static org.lwjgl.glfw.GLFW.GLFW_REFRESH_RATE;
import static org.lwjgl.glfw.GLFW.GLFW_RESIZABLE;
import static org.lwjgl.glfw.GLFW.GLFW_SAMPLES;
import static org.lwjgl.glfw.GLFW.GLFW_STENCIL_BITS;
import static org.lwjgl.glfw.GLFW.GLFW_TRUE;
import static org.lwjgl.glfw.GLFW.GLFW_VISIBLE;
import static org.lwjgl.glfw.GLFW.glfwCreateWindow;
import static org.lwjgl.glfw.GLFW.glfwDestroyWindow;
import static org.lwjgl.glfw.GLFW.glfwGetWindowAttrib;
import static org.lwjgl.glfw.GLFW.glfwPollEvents;
import static org.lwjgl.glfw.GLFW.glfwSetFramebufferSizeCallback;
import static org.lwjgl.glfw.GLFW.glfwSetWindowAspectRatio;
import static org.lwjgl.glfw.GLFW.glfwSetWindowCloseCallback;
import static org.lwjgl.glfw.GLFW.glfwSetWindowPos;
import static org.lwjgl.glfw.GLFW.glfwSetWindowPosCallback;
import static org.lwjgl.glfw.GLFW.glfwSetWindowSize;
import static org.lwjgl.glfw.GLFW.glfwSetWindowSizeCallback;
import static org.lwjgl.glfw.GLFW.glfwSetWindowTitle;
import static org.lwjgl.glfw.GLFW.glfwShowWindow;
import static org.lwjgl.glfw.GLFW.glfwWindowHint;
import static org.lwjgl.glfw.GLFW.glfwWindowShouldClose;
import static org.lwjgl.opengl.GL11.GL_TRUE;
import static org.lwjgl.system.MemoryUtil.NULL;

import org.lwjgl.glfw.GLFWFramebufferSizeCallback;
import org.lwjgl.glfw.GLFWWindowCloseCallback;
import org.lwjgl.glfw.GLFWWindowPosCallback;
import org.lwjgl.glfw.GLFWWindowSizeCallback;
import org.lwjgl.opengl.GL;
import org.lwjgl.opengl.GL11;

import vine.application.Application;
import vine.window.Window;
import vine.window.WindowCreationException;

/**
 * Lwjgl, Open-GL Desktop platform implementation of Window adapter.
 * 
 * @author Steffen
 *
 */
public class DesktopWindow extends Window implements Window {
    private volatile int x;
    private volatile int y;
    private volatile int width;
    private volatile int height;
    private volatile int bufferWidth;
    private volatile int bufferHeight;
    private volatile long window;

    private GLFWFramebufferSizeCallback framebufferSizeCallback;

    private GLFWWindowCloseCallback closeCallback;

    private GLFWWindowPosCallback positionCallback;

    private GLFWWindowSizeCallback resizeCallback = GLFWWindowSizeCallback.create((win, w, h) -> {
        glfwSetWindowSize(win, w, h);
        float aspect = w / h;
        GL11.glViewport(0, 0, w, h);
    });

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#setTitle(java.lang.String)
     */
    @Override
    public void setTitle(String title) {
        glfwSetWindowTitle(window, title);
    }

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#init(int, int, java.lang.String, long)
     */
    @Override
    public void init() throws WindowCreationException {
        this.width = width;
        this.height = height;

        glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE);
        glfwWindowHint(GLFW_VISIBLE, GLFW_FALSE);
        glfwWindowHint(GLFW_DECORATED, GLFW_TRUE);
        glfwWindowHint(GLFW_RED_BITS, Application.getDisplay().getRedBits());
        glfwWindowHint(GLFW_GREEN_BITS, Application.getDisplay().getGreenBits());
        glfwWindowHint(GLFW_BLUE_BITS, Application.getDisplay().getBlueBits());
        glfwWindowHint(GLFW_ALPHA_BITS, 8);
        glfwWindowHint(GLFW_DEPTH_BITS, 24);
        glfwWindowHint(GLFW_STENCIL_BITS, 8);
        glfwWindowHint(GLFW_ACCUM_RED_BITS, 0);
        glfwWindowHint(GLFW_ACCUM_GREEN_BITS, 0);
        glfwWindowHint(GLFW_ACCUM_BLUE_BITS, 0);
        glfwWindowHint(GLFW_ACCUM_ALPHA_BITS, 0);
        glfwWindowHint(GLFW_AUX_BUFFERS, 0);
        glfwWindowHint(GLFW_SAMPLES, 0);
        glfwWindowHint(GLFW_REFRESH_RATE, Application.getDisplay().getRefreshRate());
        window = glfwCreateWindow(Application.getDisplay().getWidth() / 2, Application.getDisplay().getHeight() / 2,
                "My Game", NULL, NULL);

        if (window == NULL) {
            throw new WindowCreationException(Messages.getString("DesktopWindow.1")); //$NON-NLS-1$
        }
        glfwSetWindowAspectRatio(window, 16, 9);
        glfwSetWindowCloseCallback(window, closeCallback);

        glfwSetWindowPosCallback(window, posCallback);

        // Center our window
        glfwSetWindowPos(window, (Application.getDisplay().getWidth() - width) / 2,
                (Application.getDisplay().getHeight() - height) / 2);

        // Make the window visible
        glfwShowWindow(window);
        for (String nam : Application.getDisplay().getMonitorNames()) {
            System.out.println(nam);
        }
        glfwSetWindowSizeCallback(window, resizeCallback);
    }

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#isResizeable()
     */
    @Override
    public boolean isResizeable() {
        return GL_TRUE == glfwGetWindowAttrib(window, GLFW_RESIZABLE);
    }

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#isVisible()
     */
    @Override
    public boolean isVisible() {
        return GL_TRUE == glfwGetWindowAttrib(window, GLFW_VISIBLE);
    }

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#isFocused()
     */
    @Override
    public boolean isFocused() {
        return GL_TRUE == glfwGetWindowAttrib(window, GLFW_FOCUSED);
    }

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#isDecorated()
     */
    @Override
    public boolean isDecorated() {
        return GL_TRUE == glfwGetWindowAttrib(window, GLFW_DECORATED);
    }

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#isIconified()
     */
    @Override
    public boolean isIconified() {
        return GL_TRUE == glfwGetWindowAttrib(window, GLFW_ICONIFIED);
    }

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#requestedWindowClosing()
     */
    @Override
    public boolean requestedWindowClosing() {
        return glfwWindowShouldClose(window) == GL_TRUE;
    }

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#close()
     */
    @Override
    public void close() {
        closeCallback.release();
        framebufferSizeCallback.release();
        posCallback.release();
        glfwDestroyWindow(window);
    }

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#dispose()
     */
    @Override
    public void dispose() {
        glfwShowWindow(0L);
    }

    /*
     * (non-Javadoc)
     * 
     * @see vine.platform.lwjgl3.Window#getContextID()
     */
    @Override
    public long getContext() {
        return window;
    }

    @Override
    public void setSizeCallback(SizeCallback callback) {
        // TODO Auto-generated method stub

    }

    @Override
    public void setPositionCallback(PositionCallback callback) {
        if (positionCallback != null) {
            positionCallback.release();
        }
        positionCallback = GLFWWindowPosCallback.create((win, w, h) -> callback.onPositionChange(win, w, h));
        glfwsetPositionCallback(window, positionCallback);
    }

    @Override
    public void setFramebufferSizeCallback(FramebufferSizeCallback callback) {
        if (framebufferSizeCallback != null) {
            framebufferSizeCallback.release();
        }
        framebufferSizeCallback = GLFWFramebufferSizeCallback
                .create((win, w, h) -> callback.onFramebufferSizeChange(win, w, h));
        glfwSetFramebufferSizeCallback(window, framebufferSizeCallback);
    }

    @Override
    public void setCloseCallback(CloseCallback callback) {
        if (closeCallback != null) {
            closeCallback.release();
        }
        closeCallback = GLFWWindowCloseCallback.create(w -> callback.onCloseRequest(w));
        glfwSetWindowCloseCallback(window, closeCallback);
    }

    @Override
    public void show() {
        glfwShowWindow(window);

    }

    @Override
    public int getWidth() {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public int getHeight() {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public int getPosX() {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public int getPosY() {
        // TODO Auto-generated method stub
        return 0;
    }

    @Override
    public void setWindowSize(int width, int height) {
        // TODO Auto-generated method stub

    }

    @Override
    public void setWindowPosition(int x, int y) {
        // TODO Auto-generated method stub

    }
}

package vine.gameplay.scene;

import java.util.ArrayList;
import java.util.List;

import vine.game.Game;
import vine.gameplay.component.Camera;
import vine.gameplay.entity.GameEntity;
import vine.graphics.Graphics;
import vine.graphics.Sprite;
import vine.math.Matrix4f;
import vine.math.Vector3f;
import vine.tilemap.TileMap;

/**
 * @author Steffen
 *
 */
public class Scene extends Layer {
    /**
     * 
     */
    public final CameraManager cameras = new CameraManager();
    private final Graphics graphics = Game.getGame().getGraphics();

    public void setMap(TileMap map) {
        renderer.submit(map);
    }

    @Override
    public final void render() {
        for (GameEntity entity : entities) {
            if (entity instanceof TileMap) {
                continue;
            }
            for (Sprite sprite : entity.getSprites()) {
                renderer.submit(sprite);
            }
        }
        renderer.flushTiles(Game.getGame().getScreen().getOrthographicProjection(), Matrix4f
                .translate(new Vector3f(-cameras.getActiveCamera().getX(), -cameras.getActiveCamera().getY(), 0)));
        renderer.flushChars(Game.getGame().getScreen().getOrthographicProjection(),
                Matrix4f.translate(
                        new Vector3f(-cameras.getActiveCamera().getX(), -cameras.getActiveCamera().getY(), 0)),
                graphics);
    }

    /**
     * @param level
     *            The asset name of the level
     * @return A newly created Scene.
     * @throws SceneCreationException
     */
    public static Scene createScene(final String level) throws SceneCreationException {
        return new Scene();
    }

    /**
     * @param delta
     *            The time that has passed since last update.
     */
    public void update(final float delta) {
        entities.stream().forEach(e -> e.update(delta));
    }

    /**
     * @author Steffen
     *
     */
    public class CameraManager {
        private final List<Camera> managedCameras = new ArrayList<>();
        private Camera activeCamera;

        /**
         * 
         */
        protected CameraManager() {
            // Default Constructor visible, so only Scene can instantiate a
            // camera manager.
        }

        /**
         * @return The camera thats viewport is currently used to render.
         */
        public Camera getActiveCamera() {
            return activeCamera;
        }

        /**
         * @param camera
         *            Camera, that should be managed
         */
        public void removeCamera(final Camera camera) {
            managedCameras.remove(camera);
        }

        /**
         * Use this method to create new cameras.
         * 
         * @return A camera that is usable in this Scene
         */
        public Camera instantiateCamera() {
            final Camera camera = Game.instantiate(Camera.class);
            managedCameras.add(camera);
            return camera;
        }

        /**
         * @param camera
         *            The camera to activate
         */
        public void activate(final Camera camera) {
            if (managedCameras.contains(camera)) {
                activeCamera = camera;
            }
        }
    }

}

package vine.game;

import java.util.ArrayList;
import java.util.List;

import vine.game.GameObject.ReferenceManager;

public class GameUtils {

    public static boolean isValidGameObjectName(String name) {
        return name != null && !name.contains(GameObject.ReferenceManager.ID_QUALIFIER)
                && !ReferenceManager.objects.containsKey(name);
    }

    /**
     * @param type
     *            Class, that is instantiated
     * @param params
     *            The optinal arguments of the construct method of the
     *            instantiated type.
     * @return Returns all GameObjects in the Game of the given type.
     */
    public static final <T extends GameObject> T instantiate(Class<T> type, Object... params) {
        return ReferenceManager.instantiate(type, ReferenceManager.generateObjectName(type), params);
    }

    /**
     * @param type
     *            The class type of the new object. Has to be a subclass of
     *            Gameobject.
     * @param name
     *            The name of the object. The gameobject can be found by this
     *            name throughout the game.
     * @param params
     *            The optinal arguments of the construct method of the
     *            instantiated type.
     * @return the newly created gameobject
     */
    public static final <T extends GameObject> T instantiate(Class<T> type, String name, Object... params) {
        return !GameUtils.isValidGameObjectName(name) || type == null ? null
                : ReferenceManager.instantiate(type, name, params);
    }

    /**
     * @param type
     *            Class that is used to look for objects of.
     * @return A stream object with all gameobject of the given type.
     */
    public static final <T extends GameObject> List<T> getObjectsByType(Class<T> type) {
        List<T> list = new ArrayList<>();
        for (GameObject object : ReferenceManager.objects.values()) {
            if (object.getClass() == type) {
                list.add(type.cast(object));
            }
        }
        return list;
    }

    /**
     * @param name
     *            Name identifier that is look up for a object.
     * @return The objects, that exists in the system by the given name.
     */
    public static final GameObject getObjectByName(final String name) {
        return ReferenceManager.objects.get(name);
    }
}

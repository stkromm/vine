package vine.graphics;

import java.nio.FloatBuffer;

/**
 * @author Steffen
 * 
 */
public class VertexArray {
    /**
     * Vertex array object.
     */
    private final int vao;
    /**
     * Vertex buffer object.
     */
    private final int vbo;
    /**
     * Index buffer object.
     */
    private final int ibo;
    /**
     * Texture buffer object.
     */
    private final int tbo;

    private final int count;

    private final Graphics graphics;

    /**
     * Creates a new vertex array buffer.
     * 
     * @param vertices
     *            The vertices
     * @param indices
     *            The indices for the vertex order
     * @param uvs
     *            The texture coordinates for the vertices
     */
    public VertexArray(final float[] vertices, final int[] indices, final float[] uvs, Graphics graphics) {
        if (indices == null) {
            throw new NullPointerException("indice field of vertex array can't be null.");
        }
        this.graphics = graphics;

        count = indices.length;

        vao = graphics.generateVertexArray();
        graphics.bindVertexArray(vao);

        vbo = graphics.generateBuffer();
        graphics.bindVertexData(vbo, vertices);

        tbo = graphics.generateBuffer();
        graphics.bindTextureData(tbo, uvs);

        ibo = graphics.generateBuffer();
        graphics.bindIndexData(ibo, indices);

        graphics.bindElementArrayBuffer(0);
        graphics.bindArrayBuffer(0);
        graphics.bindVertexArray(0);
    }

    public void changeVertices(final float[] vertices) {
        graphics.reallocateVerticeData(vbo, vertices);
    }

    public void changeTexture(final float[] uvs) {
        graphics.reallocateTextureData(tbo, uvs);
    }

    /**
     * Binds the current vertex array buffer.
     */
    public void bind() {
        graphics.bindVertexArray(vao);
        graphics.bindElementArrayBuffer(ibo);
    }

    /**
     * Unbinds the current vertex array buffer.
     */
    public void unbind() {
        graphics.bindElementArrayBuffer(0);
        graphics.bindVertexArray(0);
    }

    /**
     * Draws the current triangles in the buffer.
     */
    public void draw() {
        graphics.drawElements(count);
    }

    void render() {
        bind();
        draw();
    }

    public void changeTexture(FloatBuffer uvBuffer) {
        graphics.reallocateTextureData(tbo, uvBuffer);
        
    }
}

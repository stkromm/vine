package com.vine.math;

public class Vector3f extends Vectorf implements VectorOperations<Vector3f> {
    private float x;
    private float y;
    private float z;

    public Vector3f(float f, float g, float h) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public float getX() {
        return x;
    }

    public void setX(float x) {
        this.x = x;
    }

    public float getY() {
        return y;
    }

    public void setY(float y) {
        this.y = y;
    }

    public float getZ() {
        return z;
    }

    public void setZ(float z) {
        this.z = z;
    }

    @Override
    public boolean equalTo(final Vector3f vector) {
        if (vector == null) {
            return false;
        }
        return Math.abs(vector.getX() - x + vector.getY() - y + vector.getZ() - z) <= 3 * EPSILON;
    }

    public void add(float first, float second, float third) {
        x += first;
        y += second;
        z += third;
    }

    @Override
    public void add(Vector3f vector) {
        if (vector == null) {
            return;
        }
        x += vector.getX();
        y += vector.getY();
        z += vector.getZ();
    }

    @Override
    public strictfp double dot(Vector3f vector) {
        if (vector == null) {
            return 0;
        }
        return Math.sqrt(vector.getElement(0) * elements[0] + vector.getElement(1) * elements[1]
                + elements[2] * vector.getElement(2));
    }

    @Override
    public void scale(float factor) {
        elements[0] *= factor;
        elements[1] *= factor;
        elements[2] *= factor;

    }

    @Override
    public double length() {
        return dot(this);
    }

    @Override
    public double getAngle(Vector3f vector) {
        return this.dot(vector) / (this.length() * vector.length());
    }

    public Vector3f cross(Vector3f vector) {
        if (vector == null) {
            return new Vector3f(0, 0, 0);
        }
        return new Vector3f(elements[1] * vector.getElement(2) - elements[2] * vector.getElement(1),
                elements[2] * vector.getElement(0) - elements[0] * vector.getElement(2),
                elements[0] * vector.getElement(1) - elements[1] * vector.getElement(0));
    }

    @Override
    public void normalize() {
        final double length = length();
        elements[0] *= length;
        elements[1] *= length;
        elements[2] *= length;
    }

}

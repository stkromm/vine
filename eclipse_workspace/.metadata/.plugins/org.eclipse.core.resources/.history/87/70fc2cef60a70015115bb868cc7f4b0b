package com.vine.math;

import com.vine.util.BufferUtils;

import java.nio.FloatBuffer;

public class Matrix4f {

    public static final int SIZE = 4 * 4;
    private float[] elements = new float[SIZE];
    private float a11;
    private float a12;
    private float a13;
    private float a14;
    //
    private float a21;
    private float a22;
    private float a23;
    private float a24;
    //
    private float a31;
    private float a32;
    private float a33;
    private float a34;
    //
    private float a41;
    private float a42;
    private float a43;
    private float a44;

    /**
     * Returns an 4x4 identity matrix.
     */
    public static Matrix4f identity() {
        Matrix4f result = new Matrix4f();
        for (int i = 0; i < SIZE; i++) {
            result.elements[i] = 0.0f;
        }
        result.elements[0 + 0 * 4] = 1.0f;
        result.elements[1 + 1 * 4] = 1.0f;
        result.elements[2 + 2 * 4] = 1.0f;
        result.elements[3 + 3 * 4] = 1.0f;

        return result;
    }

    /**
     * Creates an orthographic transformation matrix.
     */
    public void orthographic(float left, float right, float bottom, float top, float near, float far) {
        a11 = 2.0f / (right - left);
        a12 = 0.f;
        a13 = 0.f;
        a14 = 0.f;
        a21 = 2.0f / (top - bottom);
        a22 = 0.f;
        a23 = 0.f;
        a24 = 0.f;
        a31 = 0.f;
        a32 = 2.0f / (near - far);
        a33 = 0.f;
        a34 = 0.f;
        a41 = (left + right) / (left - right);
        a42 = (bottom + top) / (bottom - top);
        a43 = (far + near) / (far - near);
        a44 = 0.f;
    }

    /**
     * Creates a translation matrix from the given vector.
     */
    public static Matrix4f translate(Vector3f vector) {
        Matrix4f result = identity();
        result.elements[0 + 3 * 4] = vector.getX();
        result.elements[1 + 3 * 4] = vector.getY();
        result.elements[2 + 3 * 4] = vector.getZ();
        return result;
    }

    /**
     * Creates a rotation matrix from the given vector.
     */
    public static Matrix4f rotate(float angle) {
        Matrix4f result = identity();
        float rotation = (float) Math.toRadians(angle);
        float cos = (float) Math.cos(rotation);
        float sin = (float) Math.sin(rotation);

        result.elements[0 + 0 * 4] = cos;
        result.elements[1 + 0 * 4] = sin;

        result.elements[0 + 1 * 4] = -sin;
        result.elements[1 + 1 * 4] = cos;

        return result;
    }

    /**
     * Multiplies the given matrix from the right and returns the result.
     */
    public Matrix4f multiply(Matrix4f matrix) {
        Matrix4f result = new Matrix4f();
        for (int y = 0; y < 4; y++) {
            for (int x = 0; x < 4; x++) {
                float sum = 0.0f;
                for (int e = 0; e < 4; e++) {
                    sum += this.elements[x + e * 4] * matrix.elements[e + y * 4];
                }
                result.elements[x + y * 4] = sum;
            }
        }
        return result;
    }

    public FloatBuffer toFloatBuffer() {
        return BufferUtils.createFloatBuffer(elements);
    }

}

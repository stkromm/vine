package vine.input;

public interface Input {
    @FunctionalInterface
    interface ScrollCallback {
        void scrolled(long context, double offsetx, double offsety);
    }

    void setScrollCallback(ScrollCallback callback);

    @FunctionalInterface
    interface KeyCallback {
        void keyPressed(long context, int key, int scancode, int action, int mods);
    }

    void setKeyCallback(KeyCallback callback);

    /**
     * @author Steffen
     *
     */
    @FunctionalInterface
    interface CharCallback {
        /**
         * @param context
         * @param codepoint
         */
        void charInput(long context, int codepoint);
    }

    /**
     * @param callback
     */
    void setCharCallback(CharCallback callback);

    /**
     * @author Steffen
     *
     */
    @FunctionalInterface
    interface CharModCallback {
        /**
         * @param context
         * @param codepoint
         * @param mods
         */
        void charModInput(long context, int codepoint, int mods);
    }

    /**
     * @param callback
     */
    void setCharModCallback(CharModCallback callback);

    /**
     * @author Steffen
     *
     */
    @FunctionalInterface
    interface CursorPositionCallback {
        /**
         * @param context
         * @param x
         * @param y
         */
        void changedCursorPosition(long context, double x, double y);
    }

    void setCursorPositionCallback(CursorPositionCallback callback);

    @FunctionalInterface
    interface MouseButtonCallback {
        void pressedMouseButton(long context, int button, int action, int mods);
    }

    void setMouseButtonCallback(MouseButtonCallback callback);

    double getCursorX();

    double getCursorY();

    void listenToWindow(long context);

    void pollEvents();

    boolean isReleaseAction(int action);
}

package vine.game;

import java.util.ArrayList;
import java.util.List;

import vine.components.Camera;
import vine.components.Sprite;
import vine.entity.GameEntity;
import vine.entity.PlayerPawn;
import vine.event.EventDispatcher;
import vine.game.GameObject.ReferenceManager;
import vine.graphics.Graphics;
import vine.graphics.Scene;
import vine.settings.GameSettings;
import vine.window.Window;

/**
 * Manages the gameplay on a global level. That is managing level changer
 * persistent objects and resources.
 * 
 * * Use the instantiate methods to create new objects of GameObject derived
 * classes.
 * 
 * You can add a name parameter to the instantiate method. Use this to declare a
 * name identifier for the new gameobject you can later use, to access the
 * gameobject from other objects in the game. You might check, that the given
 * name parameter is not used for a gameobject already though or the
 * instantiation of the gameobject will fail.
 * 
 * @author Steffen
 *
 */
public class Game {
    private volatile Scene scene;
    private volatile Screen screen;
    private Graphics graphics;
    private static Game game;

    private Game() {

    }

    /**
     * @return Returns the games viewport.
     */
    public static final Screen getScreen() {
        return game.screen;
    }

    /**
     * @return
     */
    public static Scene getScene() {
        return game.scene;
    }

    /**
     * @param delta
     *            The time that passed since the last update
     */
    public static void update(float delta) {
        game.scene.update(delta);
    }

    /**
     * @param level
     *            The asset name of the level that should be loaded.
     * @return true, if the level was a valid level asset and the current level
     *         could be replaced by it.
     */
    public static boolean changeLevel(String level) {
        game.scene = Scene.SceneBuilder.createScene(level, game);
        EventDispatcher.registerListener(game.scene);
        for (int i = 0; i < 50000; i++) {
            GameEntity entity = Game.instantiate(GameEntity.class);
            Sprite sprite = Game.instantiate(Sprite.class);
            entity.addComponent(sprite);
            game.scene.getEntities().add(entity);
            entity.setScene(game.scene);
        }
        PlayerPawn entity = Game.instantiate(PlayerPawn.class, 1, 2);
        Sprite sprite = Game.instantiate(Sprite.class);
        entity.addComponent(sprite);
        Camera camera = game.scene.cameras.instantiateCamera();
        entity.addComponent(camera);
        game.scene.cameras.activate(camera);
        game.scene.getEntities().add(entity);
        entity.setScene(game.scene);
        // package constructor so only SceneBuilder can create Scenes
        return false;
        // Check, that level name is valid
        // Check, that level is loaded
        // Stop level objects
        // Safe level state
        // Destroy all level dependent objects
        // Add all new scene objects and call their begin methods
        // Resume game
    }

    /**
     * 
     */
    public static void render() {
        game.scene.render();
    }

    /**
     * Creates a new World and destroys all objects of the old world.
     * 
     * @param window
     * @param graphics
     */
    public static void init(Window window, Graphics graphics) {
        game = new Game();
        game.graphics = graphics;
        game.screen = new GameScreen(window, 9.f / 16, 720);
        getObjectsByType(GameObject.class).stream().forEach(e -> e.destroy());
        changeLevel(GameSettings.getStartLevelName());
    }

    /**
     * @param type
     *            Class, that is instantiated
     * @return Returns all GameObjects in the Game of the given type.
     */
    public static final <T extends GameObject> T instantiate(Class<T> type, Object... params) {
        return ReferenceManager.instantiate(type, ReferenceManager.generateObjectName(type), params);
    }

    /**
     * @param type
     *            The class type of the new object. Has to be a subclass of
     *            Gameobject.
     * @param name
     *            The name of the object. The gameobject can be found by this
     *            name throughout the game.
     * @return the newly created gameobject
     */
    public static final <T extends GameObject> T instantiate(Class<T> type, String name, Object... params) {
        if (name.contains("?")) {
            return null;
        }
        if (!ReferenceManager.objects.containsKey(name)) {
            return ReferenceManager.instantiate(type, name, params);
        }
        return null;
    }

    /**
     * @param type
     *            Class that is used to look for objects of.
     * @return A stream object with all gameobject of the given type.
     */
    public static final <T extends GameObject> List<T> getObjectsByType(Class<T> type) {
        List<T> list = new ArrayList<>();
        ReferenceManager.objects.values().stream().forEach(obj -> {
            if (obj.getClass() == type) {
                list.add(type.cast(obj));
            }
        });
        return list;
    }

    /**
     * @param name
     *            Name identifier that is look up for a object.
     * @return The objects, that exists in the system by the given name.
     */
    public static final GameObject getObjectByName(String name) {
        return ReferenceManager.objects.get(name);
    }

    public static Graphics getGraphics() {
        return game.graphics;
    }
}

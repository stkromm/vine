package com.vine.math;

public class Vector3f extends Vectorf implements VectorOperations<Vector3f> {
    private float xele;
    private float yElement;
    private float zElement;

    public Vector3f(float f, float g, float h) {
        this.xele = xele;
        this.yElement = yElement;
        this.zElement = zElement;
    }

    public float getX() {
        return xele;
    }

    public void setX(float x) {
        this.xele = x;
    }

    public float getY() {
        return yElement;
    }

    public void setY(float y) {
        this.yElement = y;
    }

    public float getZ() {
        return zElement;
    }

    public void setZ(float z) {
        this.zElement = z;
    }

    @Override
    public boolean equalTo(final Vector3f vector) {
        if (vector == null) {
            return false;
        }
        return Math.abs(vector.getX() - xele + vector.getY() - yElement + vector.getZ() - zElement) <= 3 * EPSILON;
    }

    public void add(float first, float second, float third) {
        xele += first;
        yElement += second;
        zElement += third;
    }

    @Override
    public void add(Vector3f vector) {
        if (vector == null) {
            return;
        }
        xele += vector.getX();
        yElement += vector.getY();
        zElement += vector.getZ();
    }

    @Override
    public strictfp double dot(Vector3f vector) {
        if (vector == null) {
            return 0;
        }
        return Math.sqrt(vector.getX() * xele + vector.getY() * yElement + zElement * vector.getZ());
    }

    @Override
    public void scale(float factor) {
        xele *= factor;
        yElement *= factor;
        zElement *= factor;

    }

    @Override
    public double length() {
        return dot(this);
    }

    @Override
    public double getAngle(Vector3f vector) {
        return this.dot(vector) / (this.length() * vector.length());
    }

    public Vector3f cross(Vector3f vector) {
        if (vector == null) {
            return new Vector3f(0, 0, 0);
        }
        return new Vector3f(yElement * vector.getZ() - zElement * vector.getY(),
                zElement * vector.getX() - xele * vector.getZ(),
                xele * vector.getY() - yElement * vector.getX());
    }

    @Override
    public void normalize() {
        scale((float) length());
    }

}

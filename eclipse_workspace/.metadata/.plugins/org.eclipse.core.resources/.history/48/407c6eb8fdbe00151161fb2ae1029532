package vine.platform.lwjgl3;

import static org.lwjgl.glfw.GLFW.glfwPollEvents;
import static org.lwjgl.glfw.GLFW.glfwSetKeyCallback;

import org.lwjgl.glfw.GLFW;
import org.lwjgl.glfw.GLFWCursorPosCallback;
import org.lwjgl.glfw.GLFWKeyCallback;
import org.lwjgl.glfw.GLFWMouseButtonCallback;
import org.lwjgl.glfw.GLFWScrollCallback;

import vine.application.Input;
import vine.input.EventMapper;

public class GLFWInput implements Input {

    private long context;
    private GLFWKeyCallback keyCallback = GLFWKeyCallback.create((win, key, scancode, action, mods) -> {
        if (EventMapper.getNumberOfKeys() > key && key >= 0) {
            EventMapper.setKeyPressed(key, action != GLFW.GLFW_RELEASE);
        }
    });
    // The callbacks
    GLFWCursorPosCallback cursorPosCallback;
    GLFWMouseButtonCallback mouseButtonCallback;
    GLFWScrollCallback scrollCallback;

    @Override
    public void pollEvents() {
        glfwPollEvents();
    }

    @Override
    public void setKeyCallback(KeyCallback callback) {
        if (keyCallback != null) {
            keyCallback.release();
        }
        keyCallback = GLFWKeyCallback.create((win, key, scancode, action, mods) -> {
            if (EventMapper.getNumberOfKeys() > key && key >= 0) {
                EventMapper.setKeyPressed(key, action != GLFW.GLFW_RELEASE);
            }
        });
        glfwSetKeyCallback(context, keyCallback);
    }

    @Override
    public void startListenToWindow(long context) {
        this.context = context;
    }
}

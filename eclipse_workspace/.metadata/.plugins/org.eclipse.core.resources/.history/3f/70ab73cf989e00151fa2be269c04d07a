package com.vine.math;

public class Vector3f extends Vectorf implements VectorOperations<Vector3f> {
    private float x;
    private float y;
    private float z;

    public Vector3f(float x, float y, float z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }

    public float getX() {
        return x;
    }

    public void setX(float value) {
        this.x = value;
    }

    public float getY() {
        return y;
    }

    public void setY(float value) {
        this.y = value;
    }

    public float getZ() {
        return z;
    }

    public void setZ(float value) {
        this.z = value;
    }

    @Override
    public boolean equalTo(final Vector3f vector) {
        if (vector == null) {
            return false;
        }
        return Math.abs(vector.getX() - x + vector.getY() - y + vector.getZ() - z) <= 3 * EPSILON;
    }

    public void add(float first, float second, float third) {
        x += first;
        y += second;
        z += third;
    }

    @Override
    public void add(Vector3f vector) {
        if (vector == null) {
            return;
        }
        x += vector.getX();
        y += vector.getY();
        z += vector.getZ();
    }

    @Override
    public strictfp double dot(Vector3f vector) {
        if (vector == null) {
            return 0;
        }
        return Math.sqrt(vector.getX() * x + vector.getY() * y + z * vector.getZ());
    }

    @Override
    public void scale(float factor) {
        x *= factor;
        y *= factor;
        z *= factor;

    }

    @Override
    public double length() {
        return dot(this);
    }

    @Override
    public double getAngle(Vector3f vector) {
        return this.dot(vector) / (this.length() * vector.length());
    }

    public Vector3f cross(Vector3f vector) {
        if (vector == null) {
            return new Vector3f(0, 0, 0);
        }
        return new Vector3f(y * vector.getZ() - z * vector.getY(), z * vector.getX() - x * vector.getZ(),
                x * vector.getY() - y * vector.getX());
    }

    @Override
    public void normalize() {
        scale((float) length());
    }

}

package main


import java.util.Calendar
import java.util.concurrent.TimeUnit

import scala.util.Try
import scala.math

class Screen {

  // We need to strongly reference callback instances.
  private var errorCallback = None: Option[GLFWErrorCallback]
  private var keyCallback = None: Option[GLFWKeyCallback]
  private var lastFrameDuration = 0.0

  val vsync = 2
  val maxFrameDuration = 8
  val WIDTH = 300;
  val HEIGHT = 300;
  val title = "Hello World!"

  def loop(previous: Long) {
    pollInput()
    update()
    render()
    // Only needed, when vsync disabled
    if (vsync != 0 && maxFrameDuration != 0) {
      val frameDuration = math.max(0L, maxFrameDuration * 1000000L - java.lang.System.nanoTime + previous)
      if (frameDuration >= 500) {
        TimeUnit.NANOSECONDS.sleep(frameDuration);
      }
    }
    lastFrameDuration = 1000000000 / (java.lang.System.nanoTime - previous);
    println(lastFrameDuration)
    if (glfwWindowShouldClose(glfwGetCurrentContext) == GLFW_FALSE) {
      loop(java.lang.System.nanoTime)
    }
  }
  def run() {

    try {
      init();
      GL.createCapabilities();
      glClearColor(1.0f, 0.0f, 0.0f, 0.0f);
      loop(java.lang.System.nanoTime);
      // Release window and window callbacks
      glfwDestroyWindow(glfwGetCurrentContext);
    } finally {
      Try(keyCallback.get.release());
      // Terminate GLFW and release the GLFWErrorCallback
      glfwTerminate();
      Try(errorCallback.get.release());
    }
  }

  def init() {
    
  }
  def update() {

  }
  def render() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // clear the framebuffer
    glfwSwapBuffers(glfwGetCurrentContext); // swap the color buffers

  }
  def pollInput() {
    glfwPollEvents();
  }
}
